<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LDAP on Everything is Gray</title><link>https://everythingisgray.com/categories/ldap/</link><description>Recent content in LDAP on Everything is Gray</description><generator>Hugo</generator><language>en-us</language><copyright>James Barclay</copyright><lastBuildDate>Mon, 19 Oct 2020 00:54:34 -0400</lastBuildDate><atom:link href="https://everythingisgray.com/categories/ldap/index.xml" rel="self" type="application/rss+xml"/><item><title>Complex LDAP Queries With ldapsearch and python-ldap</title><link>https://everythingisgray.com/2014/06/01/complex-ldap-queries-with-ldapsearch-and-python-ldap/</link><pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate><guid>https://everythingisgray.com/2014/06/01/complex-ldap-queries-with-ldapsearch-and-python-ldap/</guid><description>&lt;p>I recently needed to test a complex LDAP query in a Python script I was writing. I realized shortly after beginning to construct the query that I had never done anything more than a simple &lt;code>a=b&lt;/code> or &lt;code>a=b*&lt;/code> before, (where &lt;code>*&lt;/code> is the wildcard). The solution is rather simple, albeit awkward due to the position of the binary operators. You&amp;rsquo;ll notice in the examples below that the operators are positioned &lt;em>before&lt;/em> each operand. So rather than &lt;code>a &amp;amp; b&lt;/code>, you would write &lt;code>&amp;amp;(a)(b)&lt;/code>.&lt;/p></description></item></channel></rss>